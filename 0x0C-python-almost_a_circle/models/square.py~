#!/usr/bin/python3
from models.rectangle import Rectangle


class Square(Rectangle):
    """new class inherited from rectangle"""

    def __init__(self, size, x=0, y=0, id=None):
        """constructor

        Args:
        size (int): size
        x (int): first parameter
        y (int): second parameter
        id: id
        """
        super().__init__(size, size, x, y, id)

    def __str__(self):
        """ returns readable str"""

        return "[Square] ({}) {}/{} - {}".format(
            self.id, self.x, self.y, self.height)

    @property
    def size(self):
        """get the width"""
        return self.width

    @size.setter
    def size(self, size):
        """ set the size

        Args:
        size (int): size
        """
        self.width = size
        self.height = size

    def update(self, *args, **kwargs):
        """assigns an argument to each attribute

        Args:
        args: arguments
        kwargs: key/value arguments
        """
        if args:
            i = 0
            for val in args:
                if i == 0:
                    self.id = val
                if i == 1:
                    self.size = val
                if i == 2:
                    self.x = val
                if i == 3:
                    self.y = val
                i += 1
        else:
            for key, val in kwargs.items():
                    if key == "id":
                        self.id = val
                    if key == "size":
                        self.size = val
                    if key == "x":
                        self.x = val
                    if key == "y":
                        self.y = val

    def to_dictionary(self):
        """returns the dictionary representation of a Rectangle"""

        return {"id": self.id, "size": self.size,
                "x": self.x, "y": self.y}
